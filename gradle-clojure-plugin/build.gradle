plugins {
  id 'java'
  id 'gradle-clojure.clojure'
  id 'maven-publish'
  id 'org.ajoberstar.stutter'
  id 'java-gradle-plugin'
  id 'com.gradle.plugin-publish'
}

dependencies {
  // gradle
  compileOnly gradleApi()

  // edn support
  implementation 'us.bpsm:edn-java:0.5.0'

  // util
  implementation 'org.apache.commons:commons-text:1.3'

  // compat testing
  compatTestImplementation gradleTestKit()
  compatTestImplementation 'org.clojure:clojure:1.9.0'
  compatTestImplementation 'org.clojure:tools.namespace:0.3.0-alpha4'
  compatTestImplementation 'nrepl:nrepl:0.4.1'
  compatTestImplementation 'junit:junit:4.12'
  compatTestImplementation 'org.ajoberstar:ike.cljj:0.4.1'
}

task writeProperties(type: WriteProperties) {
  outputFile = "${buildDir}/gradle-clojure.properties"
  property 'version', version
}

processResources {
  from writeProperties
}

stutter {
  sparse = true
  includeActiveRc = true
  java(8) {
    compatibleRange '4.1'
  }
  java(9) {
    compatibleRange '4.2.1'
  }
}

plugins.withId('eclipse') {
  eclipse.classpath.plusConfigurations += [configurations.compatTestCompileClasspath]
}

sourceSets.compatTest.runtimeClasspath = files(compileCompatTestClojure, sourceSets.compatTest.runtimeClasspath)

compileCompatTestClojure {
  namespaces.add 'gradle-clojure.tools.logger'
  namespaces.add 'gradle-clojure.tools.clojure-test-junit4'
}

tasks.withType(Test).matching { it.name.startsWith('compatTest') }.all {
  dependsOn ':gradle-clojure-tools:publishToMavenLocal'

  testClassesDirs = files(compileCompatTestClojure, sourceSets.compatTest.output)

  inputs.dir 'src/compatTest/projects'
  systemProperty 'clojure.test.dirs', 'src/compatTest/clojure'
  systemProperty 'stutter.projects', 'src/compatTest/projects'
  systemProperty 'org.gradle.testkit.dir', file('build/stutter-test-kit').absolutePath
}

publishing {
  publications {
    pluginMaven(MavenPublication) {
      artifact sourcesJar
    }
  }
}

gradlePlugin {
  plugins {
    clojureBase {
      id = 'gradle-clojure.clojure-base'
      implementationClass = 'gradle_clojure.plugin.clojure.ClojureBasePlugin'
    }
    clojure {
      id = 'gradle-clojure.clojure'
      implementationClass = 'gradle_clojure.plugin.clojure.ClojurePlugin'
    }
    clojurescriptBase {
      id = 'gradle-clojure.clojurescript-base'
      implementationClass = 'gradle_clojure.plugin.clojurescript.ClojureScriptBasePlugin'
    }
    clojurescript {
      id = 'gradle-clojure.clojurescript'
      implementationClass = 'gradle_clojure.plugin.clojurescript.ClojureScriptPlugin'
    }
  }
}

pluginBundle {
  website = 'https://github.com/gradle-clojure/gradle-clojure'
  vcsUrl = 'https://github.com/gradle-clojure/gradle-clojure.git'
  description = 'Clojure and ClojureScript language support for Gradle'
  plugins {
    clojureBase {
      id = 'gradle-clojure.clojure-base'
      displayName = 'Clojure base language plugin for Gradle'
      tags = ['clojure', 'language']
    }
    clojure {
      id = 'gradle-clojure.clojure'
      displayName = 'Clojure language plugin for Gradle'
      tags = ['clojure', 'language']
    }
    clojurescriptBase {
      id = 'gradle-clojure.clojurescript-base'
      displayName = 'ClojureScript base language plugin for Gradle'
      tags = ['clojurescript', 'language']
    }
    clojurescript {
      id = 'gradle-clojure.clojurescript'
      displayName = 'ClojureScript language plugin for Gradle'
      tags = ['clojurescript', 'language']
    }
  }
  mavenCoordinates {
    groupId = project.group
    artifactId = project.name
    version = project.version
  }
  // since plugin publish doesn't use maven-publish need a different way to use resolved versions in POMs
  withDependencies { deps ->
    def resolvedDeps = project.configurations.runtimeClasspath.incoming.resolutionResult.allDependencies
    deps.each { dep ->
      String group = dep.groupId
      String artifact = dep.artifactId
      ResolvedDependencyResult found = resolvedDeps.find { r ->
          (r.requested instanceof ModuleComponentSelector) &&
              (r.requested.group == group) &&
              (r.requested.module == artifact)
      }
      dep.version = found.selected.moduleVersion.version
    }
  }
}
